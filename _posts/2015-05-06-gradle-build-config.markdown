---
layout: post
title:  "Gradle and Android Tidbits"
categories: android gradle build automation
---


I am sure most Android developers are at least vaguely familiar with Gradle these days.
However, I just wanted to share a few cool tidbits.



## Variables in your config file, BuildConfig
Variables in your Gradle build file are useful because they allow you to define their value for each build type.
For example, if you do not want to send bug reports or you want to use a different API endpoint while you are developing.

```java
android {
    buildTypes {
        debug {
            buildConfigField ("boolean", "SEND_BUG_REPORTS", "false")
            buildConfigField ("String", "API_END_POINT", "\"http://dev.johnhiott.com/sample\"")
        }
        release {
            buildConfigField ("boolean", "SEND_BUG_REPORTS", "true")
            buildConfigField ("String", "API_END_POINT", "\"http://johnhiott.com/sample\"")
        }
    }
}
```

#### Using it in your application

To use the variables defined in your Gradle build file, you just reference the BuildConfig class that is generated by Gradle.

```java
//Of course, you actually do something useful with this
if (BuildConfig.SEND_BUG_REPORTS) {
    mBugReports.setText(getString(R.string.bug_reports_enabled));
}else {
    mBugReports.setText(getString(R.string.bug_reports_disabled));
}

mApiKeyTextView.setText(BuildConfig.API_END_POINT);
```

## Release APK

Generating a release ready APK is very easy with Gradle.  No need to worry about running ProGaurd, aligning your APK, or keeping up with your keys.

```java
android {
    ...
    signingConfigs {
        release {
            storeFile file(System.env['KEY_PATH'])
            storePassword System.env['STORE_PASSWORD']
            keyAlias System.env['KEY_ALIAS']
            keyPassword System.env['KEY_PASSWORD']
        }
    }

    buildTypes {
        debug {
            buildConfigField ("boolean", "SEND_BUG_REPORTS", "false")
            buildConfigField ("String", "DEV_API", "\"http://dev.johnhiott.com/sample\"")
        }
        release {
            buildConfigField ("boolean", "SEND_BUG_REPORTS", "true")
            buildConfigField ("String", "DEV_API", "\"http://johnhiott.com/sample\"")
            minifyEnabled false
            //I mentioned ProGaurd above.
            //This line is generated by Android Studio.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //NEW STUFF BELOW
            signingConfig signingConfigs.release
            zipAlignEnabled true
        }
    }
    ...
}
```
Your build.gradle file should be checked into version control. To prevent having sensitive information in the gradle file, I used environment variables to store the key details. You can also store it in a file that is ignored but I prefer the environment variables.

## The End

From package management to build configs, Gradle makes development a lot easier.  I recommend digging deeper to see what it is capable of doing.

I have include a sample project on GitHub, check it out [here](https://github.com/johnhiott/gradleexample)
